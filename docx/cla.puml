@startuml
' 注解模块
class RpcReference <<annotation>> {
  +String version() default "1.0.0"
  +String registryType() default "zookeeper"
  +String registryAddr() default "117.72.33.162:2181"
  +String loadBalanceType() default "random"
  +String serializationType() default "protostuff"
  +long timeout() default 5000
  +boolean async() default false
  +boolean oneway() default false
  +String proxy() default "jdk"
  +String group() default "default"
}

class RpcService <<annotation>> {
  +Class<?> interfaceClass() default void.class
  +String interfaceClassName() default ""
  +String version() default "1.0.0"
  +String group() default ""
}

' 协议模块
class "RpcProtocol<T>" as RpcProtocol {
  -RpcHeader header
  -T body
  +getHeader()
  +setHeader()
  +getBody()
  +setBody()
}

class RpcHeader {
  -short magic
  -byte messageType
  -byte status
  -long requestId
  -String serializationType
  -int messageLength
}

abstract class RpcMessage {
  -boolean oneway
  -boolean async
}

class RpcRequest {
  -String className
  -String methodName
  -Class[] parameterTypes
  -Object[] parameters
  -String version
  -String group
}

class RpcResponse {
  -String error
  -Object result
}

class RpcHeaderFactory {
  +{static} getRequestHeader(String)
}

' 枚举
enum RpcType {
  REQUEST
  RESPONSE
  HEARTBEAT
}

enum RpcStatus {
  SUCCESS
  FAIL
}

' 编解码模块
interface RpcCodec {
  +getJdkSerialization()
}

class RpcEncoder {
  #encode(ChannelHandlerContext, RpcProtocol<Object>, ByteBuf)
}

class RpcDecoder {
  #decode(ChannelHandlerContext, ByteBuf, List<Object>)
}

' 序列化模块
interface Serialization {
  +<T> serialize(T)
  +<T> deserialize(byte[], Class<T>)
}

class JdkSerialization {
  +<T> serialize(T)
  +<T> deserialize(byte[], Class<T>)
}

' 扫描器模块
class ClassScanner {
  +{static} getClassNameList(String)
  -{static} findAndAddClassesInPackageByFile(String, String, boolean, List<String>)
  -{static} findAndAddClassesInPackageByJar(String, List<String>, boolean, String, URL)
}

class RpcServiceScanner {
  +{static} doScannerWithRpcServiceAnnotationFilterAndRegistryService(String)
  -{static} getServiceName(RpcService)
}

class RpcReferenceScanner {
  +{static} doScannerWithRpcReferenceAnnotationFilter(String)
}

' Provider模块
interface Server {
  +startNettyServer()
}

class BaseServer {
  #String host
  #int port
  #Map<String, Object> handlerMap
  -String reflectType
  #RegistryService registryService
  +BaseServer(String, String, String, String)
  +startNettyServer()
}

class RpcSingleServer {
  +RpcSingleServer(String, String, String, String, String)
}

class RpcProviderHandler {
  -Map<String, Object> handlerMap
  -String reflectType
  +RpcProviderHandler(String, Map<String, Object>)
  #channelRead0(ChannelHandlerContext, RpcProtocol<RpcRequest>)
  -handle(RpcRequest)
  -invokeMethod(Object, Class<?>, String, Class<?>[], Object[])
  -invokeJDKMethod(Object, Class<?>, String, Class<?>[], Object[])
  -invokeCGLibMethod(Object, Class<?>, String, Class<?>[], Object[])
  +exceptionCaught(ChannelHandlerContext, Throwable)
}

' Consumer模块
class RpcClient {
  -String serviceVersion
  -String serviceGroup
  -String serializationType
  -long timeout
  -boolean async
  -boolean oneway
  +RpcClient(String, String, String, long, boolean, boolean)
  +create(Class<T>)
  +createAsync(Class<T>)
  +shutdown()
}

class JdkProxyFactory {
  +<T> getProxy(Class<T>)
}

class BaseProxyFactory {
  #ObjectProxy objectProxy
  +init(ProxyConfig<T>)
}

class ProxyConfig {
  -Class<?> clazz
  -String serviceVersion
  -String serviceGroup
  -String serializationType
  -long timeout
  -Consumer consumer
  -boolean async
  -boolean oneway
  +ProxyConfig(Class<?>, String, String, String, long, Consumer, boolean, boolean)
}

interface ProxyFactory {
  +init(ProxyConfig<T>)
  +<T> getProxy(Class<T>)
}

class ObjectProxy {
  -Class<T> clazz
  -String serviceVersion
  -String serviceGroup
  -long timeout
  -Consumer consumer
  -String serializationType
  -boolean async
  -boolean oneway
  +ObjectProxy(Class<T>)
  +ObjectProxy(Class<T>, String, String, String, long, Consumer, boolean, boolean)
  +invoke(Object, Method, Object[])
  +call(String, Object...)
  -createRequest(String, String, Object[])
  -getClassType(Object)
}

interface IAsyncObjectProxy {
  +call(String, Object...)
}

interface Consumer {
  +sendRequest(RpcProtocol<RpcRequest>)
}

class RpcConsumer {
  -Bootstrap bootstrap
  -EventLoopGroup eventLoopGroup
  -Map<String, RpcConsumerHandler> handlerMap
  +sendRequest(RpcProtocol<RpcRequest>)
  +getRpcConsumerHandler(String, int)
  +getInstance()
  +close()
}

class RpcConsumerHandler {
  -Channel channel
  -SocketAddress remotePeer
  -Map<Long, RpcFuture> pendingRPC
  #channelRead0(ChannelHandlerContext, RpcProtocol<RpcResponse>)
  +sendRequest(RpcProtocol<RpcRequest>, boolean, boolean)
  +sendRequestSync(RpcProtocol<RpcRequest>)
  -sendRequestAsync(RpcProtocol<RpcRequest>)
  -sendRequestOneway(RpcProtocol<RpcRequest>)
  -getRpcFuture(RpcProtocol<RpcRequest>)
  +getChannel()
  +getRemotePeer()
  +close()
}

class RpcConsumerInitializer {
  #initChannel(SocketChannel)
}

class RpcFuture {
  -Sync sync
  -RpcProtocol<RpcRequest> requestRpcProtocol
  -RpcProtocol<RpcResponse> responseRpcProtocol
  -long startTime
  -long responseTimeThreshold
  -List<AsyncRpcCallback> pendingCallbacks
  -ReentrantLock lock
  +RpcFuture(RpcProtocol<RpcRequest>)
  +isDone()
  +get()
  +get(long, TimeUnit)
  +isCancelled()
  +cancel(boolean)
  +done(RpcProtocol<RpcResponse>)
  +addCallback(AsyncRpcCallback)
  -runCallback(AsyncRpcCallback)
  -invokeCallbacks()
}

class AsyncRpcCallback {
  +onSuccess(Object)
  +onException(Exception)
}

class RpcContext {
  -{static} ThreadLocal<RpcContext> RPC_CONTEXT
  -RpcFuture rpcFuture
  -RpcContext()
  +{static} getContext()
  +setRpcFuture(RpcFuture)
  +getRpcFuture()
}

' 工具类
class RpcServiceHelper {
  +{static} buildServiceKey(String, String, String)
}

class IdFactory {
  -{static} AtomicLong REQUEST_ID
  +{static} getRequestId()
}

class ServerThreadPool {
  -{static} ThreadPoolExecutor threadPoolExecutor
  +{static} submit(Runnable)
  +{static} shutdown()
}

class ClientThreadPool {
  -{static} ThreadPoolExecutor threadPoolExecutor
  +{static} submit(Runnable)
  +{static} shutdown()
}

class SerializationUtils {
  +{static} int MAX_SERIALIZATION_TYPE_COUNT
  +{static} paddingString(String)
  +{static} subString(String)
}

class RpcConstants <<constants>> {
}

class SerializerException <<exception>> {
}

' Registry Module
interface RegistryService {
  +init(RegistryConfig)
  +register(ServiceMeta)
  +unRegister(ServiceMeta)
  +discovery(String, int)
  +destroy()
}

class ZookeeperRegistryService {
  -ServiceDiscovery<ServiceMeta> serviceDiscovery
  -ServiceLoadBalancer<ServiceInstance<ServiceMeta>> serviceLoadBalancer
  +init(RegistryConfig)
  +register(ServiceMeta)
  +unRegister(ServiceMeta)
  +discovery(String, int)
  +destroy()
}

class RegistryConfig {
  -String registryAddress
  -String registryType
  +RegistryConfig(String, String)
}

class ServiceMeta {
  -String serviceName
  -String serviceVersion
  -String serviceAddr
  -int servicePort
  -String serviceGroup
  +ServiceMeta(String, String, String, int, String)
}

' Load Balancer Module
interface ServiceLoadBalancer {
  +select(List<T>, int)
}

class RandomServiceLoadBalancer {
  +select(List<T>, int)
}

' 关系定义
RpcProtocol *-- RpcHeader
RpcRequest --|> RpcMessage
RpcResponse --|> RpcMessage
RpcProtocol ..> RpcRequest : uses
RpcProtocol ..> RpcResponse : uses

RpcEncoder ..|> RpcCodec
RpcDecoder ..|> RpcCodec
RpcCodec ..> Serialization : uses
JdkSerialization ..|> Serialization

RpcEncoder ..> RpcProtocol : encodes
RpcDecoder ..> RpcProtocol : decodes
RpcEncoder ..> SerializationUtils : uses
RpcDecoder ..> SerializationUtils : uses

RpcServiceScanner --|> ClassScanner
RpcReferenceScanner --|> ClassScanner
RpcServiceScanner ..> RpcService : scans
RpcReferenceScanner ..> RpcReference : scans
RpcServiceScanner ..> RpcServiceHelper : uses

BaseServer ..|> Server
RpcSingleServer --|> BaseServer
RpcSingleServer ..> RpcServiceScanner : uses
BaseServer ..> RpcProviderHandler : uses
BaseServer ..> RpcEncoder : uses
BaseServer ..> RpcDecoder : uses

RpcProviderHandler ..> RpcProtocol : processes
RpcProviderHandler ..> RpcRequest : handles
RpcProviderHandler ..> RpcResponse : creates
RpcProviderHandler ..> RpcServiceHelper : uses
RpcProviderHandler ..> ServerThreadPool : uses

JdkProxyFactory --|> BaseProxyFactory
JdkProxyFactory ..|> ProxyFactory
BaseProxyFactory ..> ProxyConfig : uses
BaseProxyFactory ..> ObjectProxy : contains
ObjectProxy ..|> IAsyncObjectProxy
ObjectProxy ..|> InvocationHandler
RpcClient ..> JdkProxyFactory : uses
RpcClient ..> ProxyConfig : creates
ObjectProxy ..> Consumer : uses
RpcConsumer ..|> Consumer
RpcConsumer ..> RpcConsumerHandler : uses
RpcConsumer ..> RpcConsumerInitializer : uses
RpcConsumerInitializer ..> RpcEncoder : configures
RpcConsumerInitializer ..> RpcDecoder : configures
RpcConsumerInitializer ..> RpcConsumerHandler : configures

RpcConsumerHandler ..> RpcProtocol : processes
RpcConsumerHandler ..> RpcRequest : sends
RpcConsumerHandler ..> RpcResponse : receives
RpcConsumerHandler ..> RpcFuture : uses

RpcConsumer ..> RpcFuture : returns
RpcConsumerHandler ..> RpcFuture : returns

RpcHeaderFactory ..> RpcHeader : creates
RpcHeaderFactory ..> IdFactory : uses
RpcHeaderFactory ..> RpcType : uses

JdkSerialization ..> SerializerException : throws

RpcFuture ..> RpcProtocol : uses
RpcFuture ..> RpcRequest : uses
RpcFuture ..> RpcResponse : uses
RpcFuture ..> AsyncRpcCallback : manages callbacks
RpcFuture ..> ClientThreadPool : uses for callbacks

RpcContext ..> RpcFuture : stores

class RpcConsumerInitializer {
  #initChannel(SocketChannel)
}

' Additional relationships
RpcConsumerInitializer ..> RpcEncoder : configures
RpcConsumerInitializer ..> RpcDecoder : configures
RpcConsumerInitializer ..> RpcConsumerHandler : configures
RpcConsumer ..> RpcConsumerInitializer : uses

' Context and Future relationships
RpcContext ..> RpcFuture : stores
RpcConsumerHandler ..> RpcContext : uses for async
RpcFuture ..> AsyncRpcCallback : manages
ObjectProxy ..> RpcHeaderFactory : uses
ObjectProxy ..> RpcProtocol : creates

' Registry relationships
ZookeeperRegistryService ..|> RegistryService
ZookeeperRegistryService ..> RegistryConfig : uses
ZookeeperRegistryService ..> ServiceMeta : manages
ZookeeperRegistryService ..> ServiceLoadBalancer : uses
RandomServiceLoadBalancer ..|> ServiceLoadBalancer
BaseServer ..> RegistryService : uses
RpcSingleServer ..> RpcServiceScanner : uses for registration
RpcServiceScanner ..> RegistryService : registers to
RpcConsumer ..> RegistryService : discovers from
RpcClient ..> RegistryService : uses
ObjectProxy ..> RegistryService : uses

@enduml