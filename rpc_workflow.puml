@startuml
title DRPC Framework Workflow

actor "Client" as client
participant "Consumer\nApplication" as consumer
participant "RPC Consumer" as rpcConsumer
participant "RPC Consumer\nHandler" as consumerHandler
participant "RPC Encoder" as encoder
participant "Network" as network
participant "RPC Decoder" as decoder
participant "RPC Provider\nHandler" as providerHandler
participant "RPC Service\nScanner" as svcScanner
participant "Provider\nApplication" as provider
participant "RPC Single\nServer" as rpcServer

note right of client
  1. Client initiates RPC call
end note

client -> consumer : Start application
consumer -> rpcConsumer : Get singleton instance
rpcConsumer -> consumerHandler : Establish connection to provider
consumer -> rpcConsumer : Send RPC request
rpcConsumer -> consumerHandler : Send request via handler
consumerHandler -> consumerHandler : Create RPC request\nwith RpcHeaderFactory
consumerHandler -> encoder : Serialize request\nwith specified serialization
encoder -> network : Send encoded data
network -> decoder : Receive data
decoder -> decoder : Deserialize with\nspecified serialization
decoder -> providerHandler : Pass RpcProtocol<Request>
providerHandler -> providerHandler : Submit to ServerThreadPool
providerHandler -> providerHandler : Look up service\nin handlerMap
providerHandler -> providerHandler : Invoke method\nbased on reflectType\n(JDK or CGLIB)
providerHandler -> encoder : Serialize response\nwith specified serialization
encoder -> network : Send response
network -> decoder : Receive response
decoder -> consumerHandler : Pass RpcProtocol<Response>
consumerHandler -> consumerHandler : Match response with request ID
consumerHandler -> rpcConsumer : Complete RpcFuture
rpcConsumer -> consumer : Return response result

note left of rpcServer
  RpcSingleServer initializes
and scans for @RpcService
annotated classes using
RpcServiceScanner
Services registered in
handlerMap
end note

rpcServer -> svcScanner : Scan packages for\n@RpcService classes
svcScanner -> svcScanner : Create service instances\nand register in handlerMap

note right of provider
  Service implementations\nare annotated with\n@RpcService
end note

note right of providerHandler
  Supports multiple reflection types:\n- JDK Reflection\n- CGLIB Reflection\nConfigured via reflectType parameter
end note

' Relationship between workflow and core classes
note right of rpcConsumer
  Instance of RpcConsumer class
end note

note right of consumerHandler
  Instance of RpcConsumerHandler class
end note

note right of encoder
  Instance of RpcEncoder class
end note

note right of decoder
  Instance of RpcDecoder class
end note

note left of providerHandler
  Instance of RpcProviderHandler class
end note

note left of svcScanner
  Instance of RpcServiceScanner class
end note

note left of rpcServer
  Instance of RpcSingleServer class
end note

' New features for async and oneway calls
note right of consumer
  Supports sync, async and oneway calls
  using RpcContext for async mode
end note

note right of consumerHandler
  Handles three types of requests:
  sync: returns RpcFuture and waits
  async: stores RpcFuture in RpcContext
  oneway: sends request without waiting
end note

note right of RpcFuture
  Implements CompletableFuture<Object>
  Supports both sync (get) and async (callbacks)
  Callbacks executed in ClientThreadPool
end note

@enduml